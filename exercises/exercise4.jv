pipeline BatteryDataPipeline {
    BatteryHttpExtractor 
    -> BatteryZipExtractor 
    -> BatteryFilePicker 
    -> BatteryTextFileInterpreter 
    -> BatteryCSVInterpreter 
    -> ColumnTranslateDeutschetoEnglish 
    -> ColumnTranslateBatteryBattery
    -> ColumnSave
    -> BatteryTableInterpreter 
    -> BatteryMasurement
    -> BatteryTransformer 
    -> BatteryDataLoader;

    block BatteryHttpExtractor oftype HttpExtractor {
        url : "https://www.mowesta.com/data/measure/mowesta-dataset-20221107.zip";
    }

    block BatteryFilePicker oftype FilePicker  {
        path : "/data.csv";
    }  
    block BatteryZipExtractor oftype ArchiveInterpreter {
        archiveType : "zip";
    }

    


    block BatteryTextFileInterpreter oftype TextFileInterpreter {
    }

    block BatteryCSVInterpreter oftype CSVInterpreter {
        delimiter: ";";
    }

    block ColumnTranslateDeutschetoEnglish oftype CellWriter {
        at: range A1:E1;
        write : ["id", "producer", "model", "month", "temperature"];
    }

    block ColumnTranslateBatteryBattery oftype CellWriter {
        at: cell J1;
        write : ["battery_temperature"];
    }


    block ColumnSave oftype ColumnDeleter {
        delete : [column F, column G, column H, column I];
    }


    block BatteryTableInterpreter oftype TableInterpreter {
        header: false;
        columns: [
            "id" oftype positiveValueType,
            "producer" oftype text,
            "model" oftype text,
            "month" oftype months,
            "temperature" oftype decimal,
            "battery_temperature" oftype decimal,
        ];
    }

    block BatteryMasurement oftype TableTransformer {
        inputColumns : ["temperature"];
        outputColumn : "temperature";
        uses : celsius_to_fahr;
    }

    block BatteryTransformer oftype TableTransformer {
        inputColumns : ["battery_temperature"];
        outputColumn : "battery_temperature";
        uses : celsius_to_fahr;
    }

    block BatteryDataLoader oftype SQLiteLoader {
        table: 'temperatures';
        file: 'temperatures.sqlite';
    }

    transform celsius_to_fahr {
        from celsius oftype decimal;
        to fahrenheit oftype decimal;
        fahrenheit: (celsius * 9/5) + 32;
 }
}
valuetype months oftype integer {
    constraints: [rangeMonthConst];
}
valuetype positiveValueType oftype integer {
    constraints : [ positiveValueConstraint ];
}
constraint positiveValueConstraint on integer :
    value >= 0;

    

constraint rangeMonthConst oftype RangeConstraint {
    lowerBound: 1;
    lowerBoundInclusive: true;
    upperBound: 12;
    upperBoundInclusive: true;
}

