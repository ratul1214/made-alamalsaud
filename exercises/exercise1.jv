// SPDX-FileCopyrightText: 2023 Friedrich-Alexander-Universitat Erlangen-Nurnberg
//

// SPDX-License-Identifier: AGPL-3.0-only


pipeline AirportPipeline {

 
  AirportExtractor
    -> AirportTextFileInterpreter;

 
  // leading to an overview of the pipeline.
  AirportTextFileInterpreter
    -> AirportCSVInterpreter
    -> AirportTableInterpreter
    -> AirportLoader;


 
  block AirportExtractor oftype HttpExtractor {

    // 8. Properties are assigned to concrete values.
    // Here, we specify the URL where the file shall be downloaded from.
    url: "https://opendata.rhein-kreis-neuss.de/api/explore/v2.1/catalog/datasets/rhein-kreis-neuss-flughafen-weltweit/exports/csv?lang=en&timezone=Europe%2FBerlin&use_labels=true&delimiter=%3B";
  }

  // 9. The HttpExtractor requires no input and produces a binary file as output.
  // This file has to be interpreted, e.g., as text file.
  block AirportTextFileInterpreter oftype TextFileInterpreter { }

  // 10. Next, we interpret the text file as sheet.
  // A sheet only contains text cells and is useful for manipulating the shape of data before assigning more strict value types to cells.
  block AirportCSVInterpreter oftype CSVInterpreter {
     delimiter: ";";
  }


  // 14. As a next step, we interpret the sheet as a table by adding structure.
  // We define a value type per column that specifies the data type of the column.
  // Rows that include values that are not valid according to the their value types are dropped automatically. 
  block AirportTableInterpreter oftype TableInterpreter {
    header: true;
    columns: [
      "Lfd. Nummer" oftype integer,
     "Name des Flughafens" oftype text,
      "Ort" oftype text,
      "Land" oftype text,
      "IATA" oftype text,
      "ICAO" oftype text,
      "Latitude" oftype decimal,
      "Longitude" oftype decimal,
     "Altitude" oftype decimal,
    ];
  }
    						

  
  // to generate the correct table.
  block AirportLoader oftype SQLiteLoader {
    table: "airports";
    file: "./airports.sqlite";
  }

  
}
